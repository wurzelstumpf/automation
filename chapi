#!/usr/bin/expect --
#==============================================================================
# SYNOPSIS
#   chapi [options] {--hosts file | host ...}
#
# DESCRIPTION
#   This script changes user passwords on one or more remote hosts.
#
#   By default a secure shell connection is made to each remote
#   host as the user who executed this script.  Following successful
#   login the user password is changed by executing:
#
#     /bin/passwd $login(user)
#
#
#   When the --login user option is specified the script will prompt
#   for the password of the specified user in order to login to each
#   remote host.
#
#   This is useful when changing the password of another user or in
#   situations where your user id is different on the remote host.
#
#   When the --other or --other-key options are used the script
#   attempts to execute the following on each remote host:
#
#     su root -c "/bin/passwd $other(user)"
#
#
#   Because of this, in addition to prompting for the new password
#   or key of the other user respectively, it will also prompt for
#   the root password.  If no root password provided it will then
#   prompt for the root key. 
#   
#   
# OPTIONS
#   --rsh
#                       Connect using rsh.  The default is ssh.
#
#   --bad file
#                       Write out the list of hosts that generated
#                       exceptions to the specified file.
#
#   --timeout seconds
#                       Number of seconds expect waits for a response
#
#   --debug
#                       Display extra information
#
#   --no-summary
#                       Do not show the summary output
#
#   --passwd cmd
#                       Use cmd instead of /bin/passwd
#
#   --login user
#                       Login to remote host as the specified user.
#
#                       DEFAULT:  Name of the user who executed
#                                 this script.
#
#                       NOTE:     This option causes the script to
#                                 prompt for the password of the
#                                 login user.
#
#   --other user
#                       Name of user whose password is to be changed
#                       on the remote system.
#
#                       NOTE:     This option causes the script to
#                                 prompt for the new password
#                                 of the other user.
#
#   --other-key user
#                       Name of user whose password is to be changed
#                       on the remote system.
#
#                       NOTE:     This option causes the script to
#                                 prompt for the new password key
#                                 of the other user.  The key is
#                                 then used by the default algorithm
#                                 to generate the new password for
#                                 the other user on each host.
#
#   --hosts file
#                       Path to a file containing a list of hosts
#                       on which the command is to be executed.
#
#   host ...
#                       The names of one or more hosts on which
#                       the command is to be executed
#
# Some rhel3 output
#
# [matthews@dhalnxcbr01 matthews]$ /usr/bin/passwd
# Changing password for user matthews.
# Changing password for matthews
# (current) UNIX password:
# New UNIX password:
# BAD PASSWORD: it's WAY too short
# New UNIX password:
# BAD PASSWORD: it's WAY too short
# New UNIX password:
# Retype new UNIX password:
# Sorry, passwords do not match
# passwd: Authentication information cannot be recovered
#
# LICENSE
#   Copyright (C) 2003-2005 Mark Matthews
#   Distributed under the terms of the GNU General Public License
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#    
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#    
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#    
# RCS
#   $Author $
#   $Date $
#   $Revision: 1.4 $
#------------------------------------------------------------------------------
#==============================================================================
# sanity check
#
exp_version -exit 5.0
#------------------------------------------------------------------------------
#==============================================================================
# global variables
#
set DEBUG "false"
log_user 0
match_max 10000
set program "/bin/passwd"
set opt(other) 0
set opt(other-key) 0
set opt(bad) 0
set bad_file ""
set login(user) [exec who am i | cut -f1 -d\ ]
set login(old_passwd) ""
set login(new_passwd) ""
set root(passwd) ""
set root(key) ""
set other(user) ""
set other(new_passwd) ""
set other(new_key) ""
set timeout 30
set HOSTS ""
set ssh "ssh"
set show_summary 1
#------------------------------------------------------------------------------
#==============================================================================
# functions
#
proc usage {umsg} {
  global argv0
  
  set prog [exec basename $argv0]

  send_user "\r\nUsage:  $umsg

  $prog \[options\] \{--hosts file | host ...\}

  where only one of these options is required:
      --hosts file      file containing list of hosts (one per line)
      host ...          one or more host names

  and these options are mutually exclusive
      --other user       change password of other user
      --other-key user   change password of other user by key

  and other options may be:
      --login user       connect as user to remote host
      --passwd cmd       use cmd instead of /bin/passwd
      --rsh              use rsh to connect (instead of ssh)
      --bad file         write list of bad hosts to file
      --timeout seconds  how long to wait for a response
      --debug            display extra information
      --no-summary       do not show the summary
      --version|-V       print script version

"
    exit 2
}

proc dbg {dmsg} {
    global DEBUG
    if [string match $DEBUG "true"] {
        send_user "\r\n***** DEBUG: $dmsg \r\n"
    }
}

proc err {emsg} {
    send_user "\r\nERROR $emsg \n"
    exit 1
}

proc banner {imsg} {
    send_user "\r\n====> $imsg \n"
}

proc kill {pid} {
    if [ catch "exec kill $pid" ] {
        dbg "Failed: kill $pid (process may already be terminated)"
    }
}

proc mkpasswd {h k} {
    global badhost

    set pass ""
    set node [string trim $h]
    set len [string length $node]
    if {[expr $len < 2]} {
        set badhost($h) "Host name less than two characters long: $h"
        return ""
    }
    append pass [string range $node 0 1]    
    append pass $k
    append pass [string range $node [expr $len - 2] [expr $len - 1]]
    return $pass
}

proc chpasswd {user} {
  upvar \#0 $user auth
  global host badhost prompt

  set sent_new_passwd 0

  dbg "chpasswd: expect: old password prompt"
  expect {
     -nocase -re "User \"$auth(user)\" does not exist" {
         set msg "chpasswd: matched: $expect_out(0,string)"
         dbg $msg
         set badhost($host) $msg
         return 1
      }
     -nocase "Only root can specify a user name" {
         set msg "chpasswd: matched: $expect_out(0,string)"
         dbg $msg
         set badhost($host) $msg
         return 1
      }
     -nocase -re "(old|login|current|.current. unix ) password:" {
         dbg "chpasswd: matched: $expect_out(0,string)"
         send "$auth(old_passwd)\r"
         dbg "chpasswd: sent: $auth(old_passwd)"
      }
      -nocase "new password" {
          dbg "chpasswd: matched: $expect_out(0,string)"
          send "$auth(new_passwd)\r"
          dbg "chpasswd: sent: $auth(new_passwd)"
          set sent_new_passwd [expr $sent_new_passwd + 1]
      }
      eof {
          set msg "chpasswd: eof: expect: old password prompt"
          dbg $msg
          set badhost($host) $msg
          return 1
      }
      timeout {
          set msg "chpasswd: timeout: expect: old password prompt"
          dbg $msg
          set badhost($host) $msg
          return 1
      }
  }

  dbg "chpasswd: expect: new password prompt"
  expect {
      -nocase -re "wrong passwd|Password incorrect|Sorry|does not match the old password" {
          dbg "chpasswd: matched: $expect_out(0,string)"
          set badhost($host) "chpasswd: password incorrect"
          return 1
      }
      -nocase "Passwords must differ" {
          dbg "chpasswd: matched: $expect_out(0,string)"
          set badhost($host) "chpasswd: new password not different enough"
          return 1
      }
      -nocase "Password too short" {
          dbg "chpasswd: matched: $expect_out(0,string)"
          set badhost($host) "chpasswd: new password too short"
          return 1
      }
      -nocase "Sorry: less than" {
          dbg "chpasswd: matched: $expect_out(0,string)"
          set badhost($host) "chpasswd: password less than minimum days old"
          return 1
      }
      -nocase -re "authentication failed|password mismatch" {
          dbg "chpasswd: matched: $expect_out(0,string)"
          set badhost($host) "chpasswd: authentication failed"
          return 1
      }
      -nocase "password failed to meet" {
          dbg "chpasswd: matched: $expect_out(0,string)"
          set badhost($host) "chpasswd: password failed requirements"
          return 1
      }
      -nocase "Try a different password" {
          dbg "chpasswd: matched: $expect_out(0,string)"
          set badhost($host) "chpasswd: password not old or tricky enough"
          return 1
      }
      -nocase "password was recently used and is not valid for reuse" {
          dbg "chpasswd: matched: $expect_out(0,string)"
          set badhost($host) "chpasswd: $expect_out(0,string)"
          return 1
      }
      -nocase "$auth(user) does not exist" {
          dbg "chpasswd: matched: $expect_out(0,string)"
          set badhost($host) "chpasswd: $expect_out(0,string)"
          return 1
      }
      -nocase -re "Password:|New password" {
          dbg "chpasswd: matched: $expect_out(0,string)"

          if {[expr $sent_new_passwd < 2]} {
              send "$auth(new_passwd)\r"
              dbg "chpasswd: sent: $auth(new_passwd)"
              set sent_new_passwd [expr $sent_new_passwd + 1]
          } else {
              set msg "chpasswd: have already sent new password $sent_new_passwd times"
              dbg $msg
              set badhost($host) $msg
              return 1
          }
          exp_continue
      }
      -nocase -re "successfully changed|$prompt|connection to .* closed" {
          dbg "chpasswd: matched: $expect_out(0,string)"
          return 0
      }
      eof {
          set msg "chpasswd: eof: expect: new password prompt"
          dbg $msg
          set badhost($host) $msg
          return 1
      }
      timeout {
          set msg "chpasswd: timeout: expect: new password prompt"
          dbg $msg
          set badhost($host) $msg
          return 1
      }
  }
}
#------------------------------------------------------------------------------
#==============================================================================
# process command line arguments
#
if {$argc == 0} {
    usage "No arguments specified"
}

for {set i 0} {$i < $argc} {incr i} {
    set arg [lindex $argv $i]
    switch -regexp -- $arg  \
    "^--hosts$" {
        incr i
        set file [lindex $argv $i]
        if [catch {open "$file" "r"} FILE] {
            err "Unable to read file: $file"
        } else {

            # NOTE:  Read each line of the file and skip lines
            #        containing only whitespace and lines beginning
            #        with the comment (#) character.  Then take the
            #        first word of the line and add it to the list
            #        of host names.
            #
            while {[gets $FILE line] != -1} {
                set line [string trimleft $line]
                if {[string length $line]} {
                    if {![string equal -length 1 $line "\#"]} {
                        regsub {([a-zA-Z0-9_\-]+).*}  $line {\1} node
                        lappend HOSTS $node
                    }
                }
            }
            close $FILE
        }
        continue
        
    } "^--login$" {
        incr i
        set login(user) [lindex $argv $i]
        continue

    } "^--other$" {
        if {[string length $other(user)]} {
            usage "Specify  --other  OR  --other-key  ONCE ONLY"
        }

        incr i
        set opt(other) 1
        set other(user) [lindex $argv $i]
        continue

    } "^--other-key$" {
        if {[string length $other(user)]} {
            usage "Specify  --other  OR  --other-key  ONCE ONLY"
        }

        incr i
        set opt(other-key) 1
        set other(user) [lindex $argv $i]
        continue

    } "^--passwd$" {
        incr i
        set program [lindex $argv $i]
        continue

    } "^--bad$" {
        set opt(bad) 1
        incr i
        set bad_file [lindex $argv $i]
        continue

    } "^--timeout$" {
        incr i
        set timeout [lindex $argv $i]
        continue

    } "^--debug$" {
        set DEBUG "true"
        continue
        
    } "^--rsh$" {
        set ssh "rsh"
        continue
        
    } "^--no-summary$" {
        set show_summary 0
        continue

    } "^(--version|-V)$" {
        set rev [exec egrep Revision: $argv0 | head -1 ]
        regsub {[^0-9\.]+([0-9\.]+).*} $rev {\1} ver
        puts $ver
        exit
        
    } "^(--.*|-.*)$" {
        usage "Unknown option: $arg"
        
    } default {
        lappend HOSTS [lindex $argv $i]

    }
}

if { [expr [llength $HOSTS] < 1] } {
    usage "No target hosts specified"
}
#------------------------------------------------------------------------------
#==============================================================================
# gather passwords
#
# NOTE:  The password and/or keys requested depend on the options
#        provided on the command line.  The table below indicates,
#        based on command line options, which passwords and/or keys
#        will be requested:
#
# |--------------------------------------------------------------------|
# |   Variables      |                    Options                      |
# |------------------|-------------------------------------------------|
# |                  |none |login |other |other-key |login | login     |
# |                  |     |      |      |          |other | other-key |
# |------------------|-----|------|------|--------- |------|-----------|
# |login(old_passwd) | yes |  yes |  yes |      yes |  yes |       yes |
# |login(new_passwd) | yes |  yes |      |          |      |           |
# |other(new_passwd) |     |      |  yes |          |  yes |           |
# |other(new_key)    |     |      |      |      yes |      |       yes |
# |root(passwd)      |     |      |  yes |      yes |  yes |       yes |
# |root(key)         |     |      |  inp |      inp |  inp |       inp | 
# |--------------------------------------------------------------------|
#
#         Where inp stands for:  If No root Password provided.
#
#         If the root password and key are zero length strings the
#         script assumes that the root password on the remote host
#         has not been set:
#
#           Zero length keys are not supported.
#                                                                                                   
#
trap exit SIGINT
set timeout -1
stty -echo

send_user "Current Login Password for $login(user): "
expect_user -re "(.*)\n"
send_user "\n"
set login(old_passwd) $expect_out(1,string)

if {!$opt(other) && !$opt(other-key)} {

    send_user "New Login Password for $login(user): "
    expect_user -re "(.*)\n"
    send_user "\n"
    set login(new_passwd) $expect_out(1,string)
    send_user "Retype New Login Password for $login(user): "
    expect_user -re "(.*)\n"
    set login(new_check) $expect_out(1,string)
    send_user "\n"
    if ![string match $login(new_passwd) $login(new_check)] {
        err "Password Mismatch -- please try again"
        exit
    }
}

if { $opt(other) } {
    send_user "New Password for Other User $other(user): "
    expect_user -re "(.*)\n"
    send_user "\n"
    set other(new_passwd) $expect_out(1,string)
    send_user "Retype New Password for Other User $other(user): "
    expect_user -re "(.*)\n"
    set other(new_check) $expect_out(1,string)
    send_user "\n"
    if ![string match $other(new_passwd) $other(new_check)] {
        err "Password Mismatch -- please try again"
        exit
    }
}

if { $opt(other-key) } {
    send_user "New Key for Other User $other(user): "
    expect_user -re "(.*)\n"
    send_user "\n"
    set other(new_key) $expect_out(1,string)
    send_user "Retype New Key for Other User $other(user): "
    expect_user -re "(.*)\n"
    set other(new_check) $expect_out(1,string)
    send_user "\n"
    if ![string match $other(new_key) $other(new_check)] {
        err "Key Mismatch -- please try again"
        exit
    }
}

if { $opt(other) || $opt(other-key) } {
    
    send_user "Root Password: "
    expect_user -re "(.*)\n"
    send_user "\n"
    set root(passwd) $expect_out(1,string)

    if { ![string length $root(passwd)] } {
        send_user "Root Key: "
        expect_user -re "(.*)\n"
        send_user "\n"
        set root(key) $expect_out(1,string)
    }
}

set timeout 30
stty echo
#------------------------------------------------------------------------------
#==============================================================================
# display summary info
#
if {$show_summary} {

    banner "Summary from [exec date {+%Y-%m-%d %H:%M:%S}]"
    send_user "\n      Login method: $ssh"
    send_user "\n        Login user: $login(user)"

    if { $opt(other) || $opt(other-key) } {   
        send_user "\n        Other user: $other(user)"
    }

    send_user "\n           Program: $program"
    send_user "\n      Target hosts: [lindex $HOSTS 0]\n"

    for {set i 1} {$i < [llength $HOSTS]} {incr i} {
        send_user "                    [lindex $HOSTS $i]\n"
    }
}
#------------------------------------------------------------------------------
#==============================================================================
# main program
#
for {set i 0} {$i < [llength $HOSTS]} {incr i} {

  set host [lindex $HOSTS $i]
  set prompt "^(%|\\\$|>)|( %| \\\$| >)|(% |\\\$ |> )|($login(user)@$host\[^ \]+ )$"
  set logged_in 0
  set login_passwd_prompt 1
  banner "$host"

  if [ catch {set PID [spawn -noecho $ssh -l $login(user) $host] } ] {
      err "Unable to execute: $ssh -l $login(user) $host"
  }

  dbg "main: expect: password or login prompt"
  while {1} {
      expect {
          -nocase -re "changing password|password has expired" {
              dbg "main: matched: $expect_out(0,string)"
              chpasswd login
              kill $PID
              break
          }
          -nocase -re "Host key not found|continue connecting"  {
              dbg "main: matched: $expect_out(0,string)"
              send "yes\r"
              dbg "main: sent: yes"
              exp_continue
          }
          -nocase "change the host key on disk"  {
              dbg "main: matched: $expect_out(0,string)"
              send "yes\r"
              dbg "main: sent: yes"
              exp_continue
          }
          -nocase "Connection Refused"  {
              dbg "main: matched: $expect_out(0,string)"
              set badhost($host) "main: connection refused"
              kill $PID
              break
          }
          -nocase -re "wrong passwd|Password incorrect|invalid" {
              dbg "main: matched: $expect_out(0,string)"
              set badhost($host) "main: bad password or login id"
              kill $PID
              break
          }
          ": END" {
              dbg "main: matched: $expect_out(0,string)"
              send "q\r"
              dbg "main: sent: q"
              exp_continue
          }
          -nocase "current password:" {
              dbg "main: matched: $expect_out(0,string)"
              send "$login(old_passwd)\r"
              dbg "main: sent: $login(old_passwd)"
              chpasswd login
              kill $PID
              break
          }
          -nocase "password:" {
              dbg "main: matched: $expect_out(0,string)"
              if {$login_passwd_prompt} {
                  set login_passwd_prompt 0
                  send "$login(old_passwd)\r"
                  dbg "main: sent: $login(old_passwd)"
                  exp_continue
              } else {
                  set msg "main: invalid login password"
                  dbg $msg
                  set badhost($host) $msg
                  kill $PID
                  break
              }
          }
          -re "$prompt" {
              dbg "main: matched: $expect_out(0,string)"
              set logged_in 1
              break
          }
          eof {
              set msg "main: eof: expect: password or login prompt"
              dbg $msg
              set badhost($host) $msg
              break
          }
          timeout {
              set msg "main: timeout: expect: password or login prompt"
              dbg $msg
              set badhost($host) $msg
              kill $PID
              break
          }
      }
  }

  if (!$logged_in) {
      continue
  }

  if {!$opt(other) && !$opt(other-key)} {
      
      set cmd "$program $login(user)"
      send "$cmd\r"
      dbg "main: sent: $cmd"
      chpasswd login

  } else {
      
      set cmd "su root -c \"$program $other(user)\""
      send "$cmd\r"
      dbg "main: sent: $cmd"

      if { [string length $root(key)] } {
          set root(passwd) [mkpasswd $host $root(key)]
      }

      if { $opt(other-key) } {
          set other(new_passwd) [ mkpasswd $host $other(new_key) ]
      }

      dbg "main: expect: root password prompt"
      while {1} {
          expect {
              -nocase -re "sorry|cannot su" {
                  dbg "main: matched: $expect_out(0,string)"
                  set badhost($host) "main: failed $cmd"
                  kill $PID
                  break
              }
              -nocase "password:" {
                  dbg "main: matched: $expect_out(0,string)"
                  send -- "$root(passwd)\r"
                  dbg "main: sent: $root(passwd)"
                  if [ expr [chpasswd other] == 1 ] {
                      set msg "main: password change failed: $other(user)"
                      dbg $msg
                  }
                  break
              }
              -re "$prompt" {
                  dbg "main: matched: $expect_out(0,string)"
                  send_user "\r\n"
                  break
              }
              eof {
                  set msg "main: eof: expect: root password prompt"
                  dbg $msg
                  set badhost($host) $msg
                  break
              }
              timeout {
                  set msg "main: timeout: expect: root password prompt"
                  dbg $msg
                  set badhost($host) $msg
                  kill $PID
                  break
              }
          }
      }
  }

  close
  wait
}
#------------------------------------------------------------------------------
#==============================================================================
# list exceptions
#
if {[array size badhost]} {
    banner "Exceptions\n"

    foreach entry [array names badhost] {
        send_user "            $entry: $badhost($entry)\n"
    }

    if {$opt(bad)} {
        if [catch {open "$bad_file" "w"} FFILE] {
            err "Unable to write file: $bad_file"
        } else {
            foreach entry [array names badhost] {
                puts $FFILE $entry
            }
            close $FFILE
        }
    }
}
#------------------------------------------------------------------------------
#==============================================================================
#
#------------------------------------------------------------------------------
